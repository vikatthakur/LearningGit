#Gives the list of tracked fle by git
git ls-fiiles

#git express commit command will add the file in staging area and then commit them automatically
git commit -a

#Unstaging the file
git reset HEAD <file_name>

#checkout the file it will give the last commited version of the file
git checkout -- <file_name>

#log command for all the commits made for all the files in repo
git log --oneline --graph --decorate --all

#creating an alias for long command
git confing --global alias.<alias_name> "log --oneline --graph --decorate --all"

#listing the config
git config --global --list

#git rm and mv command it will track the changes
git rm <file_name>
git mv <file_name>

#updating the git staging status after external operation such as remove or rename
git add -u

#reflecting the external changes
git add -A

###############################################################################################################################

#Advaanced git command

#finding the changes
git diff <commit_id> <commit_id/HEAD>

#Will give the changes from the current directory
git diff 

#Creating the new branch
git checkout -b <branch_name>

#changing to the branch
git chekout master

##NOTE: Remember to before changing the branches to commit all the previous changes

#Merging the branch(fast-forward)
git merge <branch_name>

#deleting the branch
git branch -d <branch_name>

#show command
git show [option]

#git tag command
git tag <tag_name>
git tag -a <annotation> -m <message>


#Stashing it will save the current changes in branch in the stash and will give the clean working directory
git stash

#pop stash
git stash pop


##More on reset command

#It will only point the head to the passed commit_id
git reset <commit_id> --soft 

#It will point the head and also do the changes in the staging area
git reset <commt_id> --mixed

#It will make the most changes and provide you the clean directory that is pointing to the passed commit_id
git reset <commit_id> --hard








